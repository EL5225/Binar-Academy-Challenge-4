// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int            @id @default(autoincrement())
  name        String
  email       String         @unique
  password    String
  Profile     Profiles?
  BankAccount BankAccounts[]
}

model Profiles {
  id             Int      @id @default(autoincrement())
  phoneNumber    String?  @unique
  identityType   String?
  identityNumber String?
  gender         String?
  religion       String?
  address        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId         Int      @unique
}

model BankAccounts {
  id                    Int            @id @default(autoincrement())
  accountNumber         String         @unique @default(uuid())
  name                  String
  balance               Int
  createdAt             DateTime       @default(now())
  user                  Users          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId                Int
  TransactionAsSender   Transactions[] @relation("sourceAccount")
  TransactionAsReceiver Transactions[] @relation("destinationAccount")
}

model Transactions {
  id                       Int          @id @default(autoincrement())
  sourceAccount            BankAccounts @relation("sourceAccount", fields: [sourceAccountNumber], references: [accountNumber], onDelete: Cascade, onUpdate: NoAction)
  sourceAccountNumber      String
  destinationAccount       BankAccounts @relation("destinationAccount", fields: [destinationAccountNumber], references: [accountNumber], onDelete: Cascade, onUpdate: NoAction)
  destinationAccountNumber String
  amount                   Int
  createdAt                DateTime     @default(now())
}
